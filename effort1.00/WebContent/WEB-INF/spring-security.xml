<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd">

	<http pattern="/helloWorld" security="none"></http>

	<http auto-config="true" use-expressions="true">
		<intercept-url pattern="/welcome*" access="hasRole('ROLE_USER')"
			requires-channel="any"></intercept-url>
		<intercept-url pattern="/admin**" access="hasRole('ROLE_ADMIN')" />
		<!-- requires-channel="https" property of intercept-url tag example: <intercept-url 
			pattern="/admin**" access="hasRole('ROLE_ADMIN')" requires-channel="https"/> 
			<intercept-url pattern="/welcome*" access="hasRole('ROLE_USER')" requires-channel="any"/> -->

		<access-denied-handler error-page="/403" />
		<!-- or we can customize like below: i got this got from prm code: it is 
			working also <access-denied-handler ref="accessDeniedHandler" /> -->



		<form-login login-page="/login" default-target-url="/welcome"
			authentication-failure-url="/login?error" username-parameter="username"
			password-parameter="password" login-processing-url="/auth/login_check"
			authentication-success-handler-ref="savedRequestAwareAuthenticationSuccessHandler" />
		<!--always-use-default-target='true' we can also use this property if if 
			your application always requires that the user starts at a "home" page, example: 
			<form-login login-page="/login" default-target-url="/welcome" authentication-failure-url="/login?error" 
			username-parameter="username" password-parameter="password" always-use-default-target='true'/> -->

		<logout logout-success-url="/login?logout" invalidate-session="true"
			delete-cookies="JSESSIONID" />
		<!-- invalidate-session="true" we can also include this property into logout 
			tag -->

		<session-management invalid-session-url="/login?error">
			<concurrency-control max-sessions="1" />
		</session-management>

		<!-- enable csrf protection :which is not working for me and I do'nt know 
			why -->
		<!-- <csrf/> -->

		<!-- f your application uses non-standard ports for HTTP and/or HTTPS, 
			you can specify a list of port mappings as follows(but I did not get better 
			idea of this): <port-mappings> <port-mapping http="9080" https="9443"/> </port-mappings> -->

		<!-- If session timed out and user request something then we can use this 
			mechnism Note that if you use this mechanism to detect session timeouts, 
			it may falsely report an error if the user logs out and then logs back in 
			without closing the browser. This is because the session cookie is not cleared 
			when you invalidate the session and will be resubmitted even if the user 
			has logged out. <session-management invalid-session-url="/invalidSession.htm" 
			/> -->
		<!-- <logout delete-cookies="JSESSIONID" /> -->
		<!-- <session-management> <concurrency-control max-sessions="1" /> error-if-maximum-exceeded="true" 
			u can also set this proprty u can also use session-authentication-error-url 
			tag to redirect if second attempt is m2ade , other wise authentication-failure-url 
			of form login tag will be used or unauthorized" (401) error will be sent 
			to the client if other authentication mechnaism like remember is used </session-management> 
			it will be use with ttpSessionEventPublisher listner in web.xml -->
		<!-- session-fixation-protection attribute on <session-management>, which 
			has four options for more detail readthe docs -->
		<!-- simple hash besed token approach <remember-me key="myAppKey"/>is used 
			of remember-me enabling persistent token approch <remember-me data-source-ref="someDataSource"/> -->



		<remember-me token-validity-seconds="1209600"
			data-source-ref="dataSource" />
		<!-- we can add here remember-me-parameter="remember-me" to give the custom 
			name of nemember-me checkbox but it is not working , so I used _spring_security_remember_me 
			check box name in login.jsp -->



		<!-- this thing is also not working , I dont know why <headers> <cache-control 
			/> </headers> -->

	</http>

	<beans:bean id="savedRequestAwareAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<beans:property name="targetUrlParameter" value="targetUrl" />
	</beans:bean>


	<!-- the following declaration would enable support for Spring Securityâ€™s 
		@Secured: which is not working for me -->
	<!--<global-method-security secured-annotations="enabled" /> or <global-method-security 
		jsr250-annotations="enabled" /> or <global-method-security pre-post-annotations="enabled" 
		/> or <global-method-security> <protect-pointcut expression="execution(* 
		com.mycompany.*Service.*(..))" access="ROLE_USER"/> </global-method-security> -->
	<!-- access-decision-manager-ref="myAccessDecisionManagerBean" attribute: 
		important(need to learn it further ) you can use this attribute to customize 
		the access decisions in http tag for web security and in global-method-security 
		tag for method security, -->


	<beans:bean id="customUserDetailsService" class="com.users.service.CustomUserDetailsService">
		<beans:property name="usersByUsernameQuery"
			value="select * from users where username = ?" />
		<beans:property name="authoritiesByUsernameQuery"
			value="select u.username, ur.role from users u, user_roles ur 
					where u.user_id = ur.user_id and u.username =?  " />
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<beans:bean id="userDetailsDao" class="com.users.dao.UserDetailsDaoImpl">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<beans:bean id="encoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
	</beans:bean>

	<beans:bean id="authenticationProvider"
		class="com.web.handler.LimitLoginAuthenticationProvider">
		<beans:property name="userDetailsService" ref="customUserDetailsService" />
		<beans:property name="userDetailsDao" ref="userDetailsDao" />
		<beans:property name="passwordEncoder" ref="encoder" />
	</beans:bean>

	<!-- <beans:bean id="accessDeniedHandler" class="com.util.MyAccessDeniedHandler"> 
		<beans:property name="accessDeniedUrl" value="pages/403.jsp" /> </beans:bean> -->


	<authentication-manager alias="authenticationManager">
		<!--alias is used to give a name to the authentication manager instance 
			so it can be ref in any other beans like: <bean id="myBean" class="com.MyBean"> 
			for example i can use it in myBean <property name="authenticationManager" 
			ref="authenticationManager"/> </bean> -->
		<authentication-provider ref="authenticationProvider">
		</authentication-provider>
	</authentication-manager>



</beans:beans>